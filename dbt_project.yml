
# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'demo_dbt'
version: '1.0.0'
require-dbt-version: ">=1.3.2"
config-version: 2

# This setting configures which "profile" dbt uses for this project.
profile: 'demo_dbt'

# These configurations specify where dbt should look for different types of files.
# The `model-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

target-path: "target"  # directory which will store compiled SQL files
clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"


# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In this example config, we tell dbt to build all models in the example/ directory
# as tables. These settings can be overridden in the individual model files
# using the `{{ config(...) }}` macro.
models:
  demo_dbt:
    aw_model: # this matches the `name:`` config
      +materialized: view # this applies to all models in the current project 
      query_tag: aw_model_generation
    aw_source:
      schema: staging
      query_tag: source_staging    
      +materialized: table
    snow_test:
      schema: staging
      +materialized: table
     
    # Config indicated by + and applies to all files under models/example/
  #staging:
          # Applies to all files unddbter models/staging 
    #      +materialized: view
          # This defaults every model in the staging directory to be materialized as a view in Snowflake. To learn more about materializations: https://docs.getdbt.com/docs/building-a-dbt-project/building-models/materializations
    #      schema: staging
          # This configuration builds every model in the staging directory into a schema named staging_<target_schema>
          # learn more about custom schemas: https://docs.getdbt.com/docs/building-a-dbt-project/building-models/using-custom-schemas
     #     query_tag: dbt_staging
          # This applies a query tag named `dbt_stagingd` to any related queries in Snowflake's Query_History
          # learn more about query tags: https://docs.getdbt.com/reference/resource-configs/snowflake-configs#query-tags
     #     snowflake_warehouse: compute_wh
          # This specifies which Snowflake warehouse should be used to execute models in staging by overriding the default warehouse defined in the connection.
          # learn more about configuring warehouses: https://docs.getdbt.com/reference/resource-configs/snowflake-configs#configuring-virtual-warehouses
       #   tags: "daily"
          # You can apply tags to models, snapshots, seeds. This allows you to run based on the tag such as `dbt run --model tag:daily` which would let you run all the models tagged "daily"
          # learn more about tags: https://docs.getdbt.com/reference/resource-configs/tags#definition

  
